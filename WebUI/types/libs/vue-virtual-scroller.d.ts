/** Declaration file generated by dts-gen */

declare module 'vue-virtual-scroller' {
	import Vue, { ComponentOptions, PluginObject } from 'vue';
	interface PluginOptions {
		installComponents?: boolean;
		componentsPrefix?: string;
	}

	const plugin: PluginObject<PluginOptions> & { version: string };

	export namespace RecycleScroller {
		const components: {
			ResizeObserver: {
				beforeDestroy: any;
				methods: {
					addResizeHandlers: any;
					compareAndNotify: any;
					removeResizeHandlers: any;
				};
				mounted: any;
				name: string;
				render: any;
				staticRenderFns: any[];
			};
		};

		const directives: {
			ObserveVisibility: {
				bind: any;
				unbind: any;
				update: any;
			};
		};

		const name: string;

		const props: {
			buffer: {
				default: number;
				type: any;
			};
			direction: {
				default: string;
				type: any;
				validator: any;
			};
			emitUpdate: {
				default: boolean;
				type: any;
			};
			itemSize: {
				default: any;
				type: any;
			};
			items: {
				required: boolean;
				type: any;
			};
			keyField: {
				default: string;
				type: any;
			};
			minItemSize: {
				default: any;
				type: any[];
			};
			pageMode: {
				default: boolean;
				type: any;
			};
			prerender: {
				default: number;
				type: any;
			};
			sizeField: {
				default: string;
				type: any;
			};
			typeField: {
				default: string;
				type: any;
			};
		};

		const staticRenderFns: any[];

		function beforeDestroy(): void;

		function created(): void;

		function data(): any;

		function mounted(): void;

		function render(): any;

		namespace computed {
			function simpleArray(): any;

			function sizes(): any;

		}

		namespace methods {
			function addListeners(): void;

			function addView(pool: any, index: any, item: any, key: any, type: any): any;

			function applyPageMode(): void;

			function getListenerTarget(): any;

			function getScroll(): any;

			function handleResize(): void;

			function handleScroll(event: any): void;

			function handleVisibilityChange(isVisible: any, entry: any): void;

			function itemsLimitError(): void;

			function removeListeners(): void;

			function scrollToItem(index: any): void;

			function scrollToPosition(position: any): void;

			function unuseView(view: any, ...args: any[]): void;

			function updateVisibleItems(checkItem: any): any;

		}

		namespace watch {
			function items(): void;

			function pageMode(): void;

			namespace sizes {
				const deep: boolean;

				function handler(): void;

			}

		}

	}
	export namespace DynamicScroller {
		const components: {
			RecycleScroller: {
				beforeDestroy: any;
				components: {
					ResizeObserver: {
						beforeDestroy: any;
						methods: {
							addResizeHandlers: any;
							compareAndNotify: any;
							removeResizeHandlers: any;
						};
						mounted: any;
						name: string;
						render: any;
						staticRenderFns: any[];
					};
				};
				computed: {
					simpleArray: any;
					sizes: any;
				};
				created: any;
				data: any;
				directives: {
					ObserveVisibility: {
						bind: any;
						unbind: any;
						update: any;
					};
				};
				methods: {
					addListeners: any;
					addView: any;
					applyPageMode: any;
					getListenerTarget: any;
					getScroll: any;
					handleResize: any;
					handleScroll: any;
					handleVisibilityChange: any;
					itemsLimitError: any;
					removeListeners: any;
					scrollToItem: any;
					scrollToPosition: any;
					unuseView: any;
					updateVisibleItems: any;
				};
				mounted: any;
				name: string;
				props: {
					buffer: {
						default: number;
						type: any;
					};
					direction: {
						default: string;
						type: any;
						validator: any;
					};
					emitUpdate: {
						default: boolean;
						type: any;
					};
					itemSize: {
						default: any;
						type: any;
					};
					items: {
						required: boolean;
						type: any;
					};
					keyField: {
						default: string;
						type: any;
					};
					minItemSize: {
						default: any;
						type: any[];
					};
					pageMode: {
						default: boolean;
						type: any;
					};
					prerender: {
						default: number;
						type: any;
					};
					sizeField: {
						default: string;
						type: any;
					};
					typeField: {
						default: string;
						type: any;
					};
				};
				render: any;
				staticRenderFns: any[];
				watch: {
					items: any;
					pageMode: any;
					sizes: {
						deep: boolean;
						handler: any;
					};
				};
			};
		};

		const inheritAttrs: boolean;

		const name: string;

		const props: {
			direction: {
				default: string;
				type: any;
				validator: any;
			};
			items: {
				required: boolean;
				type: any;
			};
			keyField: {
				default: string;
				type: any;
			};
			minItemSize: {
				required: boolean;
				type: any[];
			};
		};

		const staticRenderFns: any[];

		function activated(): void;

		function created(): void;

		function data(): any;

		function deactivated(): void;

		function provide(): any;

		function render(): any;

		namespace computed {
			function itemsWithSize(): any;

			function listeners(): any;

			function simpleArray(): any;

		}

		namespace methods {
			function forceUpdate(...args: any[]): void;

			function getItemSize(item: any, ...args: any[]): any;

			function onScrollerResize(): void;

			function onScrollerVisible(): void;

			function scrollToBottom(): void;

			function scrollToItem(index: any): void;

		}

		namespace watch {
			function direction(value: any): void;

			function items(): void;

			namespace simpleArray {
				const immediate: boolean;

				function handler(value: any): void;

			}

		}

	}
	export namespace DynamicScrollerItem {
		const inject: string[];

		const name: string;

		const props: {
			active: {
				required: boolean;
				type: any;
			};
			emitResize: {
				default: boolean;
				type: any;
			};
			index: {
				default: any;
				type: any;
			};
			item: {
				required: boolean;
			};
			sizeDependencies: {
				default: any;
				type: any[];
			};
			tag: {
				default: string;
				type: any;
			};
			watchData: {
				default: boolean;
				type: any;
			};
		};

		function beforeDestroy(): void;

		function created(): any;

		function mounted(): void;

		function render(h: any): any;

		namespace computed {
			function id(): any;

			function size(): any;

		}

		namespace methods {
			function computeSize(id: any): void;

			function getBounds(): any;

			function onDataUpdate(): void;

			function onVscrollUpdate(_ref: any): void;

			function updateSize(): void;

			function updateWatchData(): void;

		}

		namespace watch {
			const watchData: string;

			function active(value: any): void;

			function id(): void;

		}

	}

	export function IdState(options?: {
		idProp?: (vm: any) => any;
	}): ComponentOptions<Vue> | typeof Vue;

	export default plugin;
}

